name: CMake_build & release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE:   Release
  
jobs:
  # ---[ WINDOWS DEPENDENCIES ]---
  # Pkg-Config
  win_dependency-Pkg-Config:
    runs-on: windows-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        repository: wingtk/gvsbuild

    - name: build
      # builds GTK, which contains required dependencies pkg-config and lz4
      working-directory: ${{github.workspace}}/gvsbuild
      run: 
        python ./build.py build -p=x64 --vs-ver=17 pkg-config lz4
        tree ${{github.workspace}}
#      |
#        mkdir -F ./build && cd build
#        git clone https://github.com/wingtk/gvsbuild        
#        cd ./gvsbuild
#        python ./build.py build --build-dir=$pwd\\..\\gtk -p=x64 --vs-ver=17 pkg-config lz4

  # GTest
  win_dependency-GTest:
    runs-on: windows-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        repository: google/googletest

    - name: build
      # builds and installs the most recent version of the google test
      working-directory: ${{github.workspace}}/googletest
      run: |
#        git clone https://github.com/google/googletest.git
        mkdir -F ./build && cd ./build
        cmake .. --install-prefix=$pwd/../../GTest
        cmake --build . --config Release
        cmake --install .
        tree ${{github.workspace}}

  # ---[ WINDOWS BUILD ]---
    build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    needs: win_dependency-Pkg-Config
           win_dependency-GTest

    steps:
    - name: checkout
      uses: actions/checkout@v3
    

        



    - name: Configure CMake for building FLANN
      working-directory: ${{github.workspace}}/build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPKG_CONFIG_EXECUTABLE="$pwd/gtk/gtk/x64/release/bin/pkg-config.exe" -DPKG_CONFIG_ROOT="$pwd/gtk/gtk/x64/release/bin" -DGTEST_ROOT="$pwd/GTest" --install-prefix=$pwd/../out_aftifacts

    - name: Build
      working-directory: ${{github.workspace}}/build
      # Build your program with the given configuration
      run: cmake --build . --config ${{env.BUILD_TYPE}} 

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Install & zip artifacts
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --install .
        cd ../out_aftifacts
        tar -cvf ../flann_x64_${{github.sha}}.tar.gz *  
      
    - name: upload-artifacts
      uses: actions/upload-artifact@v3
      with:
        name: flann_x64_${{github.sha}}
        path: ${{github.workspace}}/flann_x64_${{github.sha}}.tar.gz
        
  publish-release:
    runs-on: windows-latest
    needs: build-windows
    steps:
      - name: download compiled artifacts
        uses: actions/download-artifact@v3
        with:
          name: flann_x64_${{github.sha}}
          
      - name: create new release
        id: create_new_release
        uses: actions/create-release@v1
        with:
          draft:      true
          prerelease: false
          release_name:  test #${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
            
      - name: upload windows artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_new_release.outputs.upload_url }}
          asset_path: flann_x64_${{github.sha}}.tar.gz
          asset_name: flann_x64_${{github.sha}}.tar.gz
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ github.token }}

